/* tslint:disable */
/* eslint-disable */
/**
 * Planetizer API
 * Planetizer API!
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Config
 */
export interface Config {
    /**
     * 
     * @type {Array<ConfigSource>}
     * @memberof Config
     */
    'sources': Array<ConfigSource>;
    /**
     * 
     * @type {Array<ConfigTag>}
     * @memberof Config
     */
    'tags': Array<ConfigTag>;
}
/**
 * 
 * @export
 * @interface ConfigSource
 */
export interface ConfigSource {
    /**
     * RSSのURL
     * @type {string}
     * @memberof ConfigSource
     */
    'rss_url': string;
    /**
     * RSS配信元の名前
     * @type {string}
     * @memberof ConfigSource
     */
    'name': string;
    /**
     * RSS配信元の説明
     * @type {string}
     * @memberof ConfigSource
     */
    'desc': string;
    /**
     * RSS配信元についたタグ一覧
     * @type {Array<string>}
     * @memberof ConfigSource
     */
    'tags': Array<string>;
    /**
     * 読み込んだ直後の可視状態
     * @type {boolean}
     * @memberof ConfigSource
     */
    'initial_visible': boolean;
}
/**
 * 
 * @export
 * @interface ConfigTag
 */
export interface ConfigTag {
    /**
     * RSS配信元についたタグ
     * @type {string}
     * @memberof ConfigTag
     */
    'name': string;
    /**
     * RSS配信元についたタグの概要
     * @type {string}
     * @memberof ConfigTag
     */
    'desc': string;
}
/**
 * 
 * @export
 * @interface FeedEntry
 */
export interface FeedEntry {
    /**
     * フィードエントリのタイトル
     * @type {string}
     * @memberof FeedEntry
     */
    'title': string;
    /**
     * フィードエントリのURL
     * @type {string}
     * @memberof FeedEntry
     */
    'link': string;
    /**
     * フィードエントリの公開日時
     * @type {string}
     * @memberof FeedEntry
     */
    'published': string;
    /**
     * フィードエントリの概要
     * @type {string}
     * @memberof FeedEntry
     */
    'summary': string;
    /**
     * フィードエントリの配信サイトの名前
     * @type {string}
     * @memberof FeedEntry
     */
    'source': string;
    /**
     * 
     * @type {ConfigSource}
     * @memberof FeedEntry
     */
    'config_source': ConfigSource;
}
/**
 * 
 * @export
 * @interface FeedResult
 */
export interface FeedResult {
    /**
     * 
     * @type {Config}
     * @memberof FeedResult
     */
    'config': Config;
    /**
     * フィードキュレーションを実行した日時
     * @type {string}
     * @memberof FeedResult
     */
    'generated_at': string;
    /**
     * 
     * @type {Array<FeedEntry>}
     * @memberof FeedResult
     */
    'entries': Array<FeedEntry>;
    /**
     * 
     * @type {{ [key: string]: SourceMapValue; }}
     * @memberof FeedResult
     */
    'source_map': { [key: string]: SourceMapValue; };
}
/**
 * 
 * @export
 * @interface SourceMapValue
 */
export interface SourceMapValue {
    /**
     * 
     * @type {number}
     * @memberof SourceMapValue
     */
    'entry_count': number;
    /**
     * 
     * @type {ConfigSource}
     * @memberof SourceMapValue
     */
    'config_source': ConfigSource;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * dummy
         * @summary dummy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dummy: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dummy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * dummy
         * @summary dummy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dummy(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dummy(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.dummy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * dummy
         * @summary dummy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dummy(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.dummy(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * dummy
     * @summary dummy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public dummy(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).dummy(options).then((request) => request(this.axios, this.basePath));
    }
}



