// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWXW/cRBT9KzDw6OxHI0D4raIQRYqqKLvlAYSiye6sM2B7zMxsRagsYZtFLWkoApG2",
	"4iEttGmVjyUSiC9FzY+58XbzL9DY3l3vejf2CvVtbN9z77lnzsz1LdRglsNsYkuB9FtINDaJhaPle8xu",
	"UUOtHM4cwiUlcQhr80a8pJJY0eJNTlpIR2+UR9nKSapynKcWoZCrIbnlEKQjzDneip6xMW+yOjaymVwN",
	"cfJ5m3LSRPrHQ5pJgU+G4WzjU9KQCj/GLNNnk4hGHp0Ye01FuhqiNpUUm+s3qaAbJikGXo5BHyYYV0M2",
	"tgpir6tI1bcQ621uFgOtCXGDm2nl8zF1bKxQITMiDwonpLVYtFzJ1f79D73r2BhIXlyrOjZiuSZaSBOf",
	"xvgDQprv25JvZRmb1P4sr7iCr6g4V0NOe8OkYlPVzQetDoNdLTHzvCdNtC0Lx8TzqtWSUOUKKvO9qzD1",
	"KHBSzxiuxeKkex7xGfYzS+8lYhOOJWlelQNncOpIymykIwh+Av9XCE4huAP+MQRPIThSj/5fEDyD4Hfw",
	"fwi7e/3Hd8G7D95e7/7T3kMfaYh8gS1HtYauVK68tVB5e6G6WK+8qy9W9co7HyENtRi3sEQ6amJJFiSN",
	"jJEQFJJT2xgQXEl2/jJmzxWV4DYEB+B1b6ytjDHYlNIRermcvCk1mFXGXNKGScrVNJU2p7NIrKbtVJhJ",
	"2Dm62N1+FaKsEdE2ZfaYNIaDJN+8KhexJadzDJjRCZ0yXYyBldaxLJIobb1JayeNTCQdEZ5l59roHBbe",
	"pt6+39/3xjao//zB+b/b6W9Tt6E+OL+Fa4F/Bv6T6PFwesWJiEzd1BzMFF6r1S46O+dnj8NOAF63f3DU",
	"e/DdWJklBoEXMXsE3iH4t8HfDjtH4ek9CHYhOAb/ZHbRifmZKd8/OAbvrP/iFPwfwXv08uc/whd31Tm4",
	"91t/f/flt3/2Otuj7BuMmQTbo/TXkwFzaU/h9zvhnZ2xngarmbyTMTwtdcH7okVIs4QlswrcF+ODM6ef",
	"Q/CegPc1eHvRvp9Mt+MSA+/wYvcX8B6q/fqmE3b/GVjl5FIO0a/EnBzO//6qv/8MacWuhImRn70WxgPm",
	"5DImg8GyvbrRz2CLZROvmtgmkn5J+GtXV5dfR8NxO/EFaegm4SIGVUuVUkWxZg6xsUORjhZL1VJFjVcs",
	"NyM1ys22ZUVXjEGmiBt/jTJwrN4tN5GOriVvOREOs0V056b/GxKY67rufwEAAP//L/WLNikMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
