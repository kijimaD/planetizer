// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWW2/cRBT+KzDw6OylESD8VlGIIkVVlN3yAELRZHfWGbA9Zma2IlSWsM2iljQUgUhb",
	"8ZAW2rTKZYkE4qao+TEn3m7+BRrbu+td78Zeob6NPef7zncuM2duoQazHGYTWwqk30KisUksHC3fY3aL",
	"GmrlcOYQLimJTVibN+IllcSKFm9y0kI6eqM8YisnVOWYpxahkKshueUQpCPMOd6KvrExL1kdG1kmV0Oc",
	"fN6mnDSR/vFQZuLgk6E52/iUNKTCjynLxNkkopEnJ8ZeU5auhqhNJcXm+k0q6IZJioGXY9CHCcbVkI2t",
	"gtjrylLFLcR6m5vFQGtC3OBmOvP5mDo2VqiQmSQPHCeitThpCXM2IbOLoCr6PypQx8agCMWzV8dGnMCJ",
	"oNKhTFP8ASHN923Jt7KKTWp/ludcwVeUnashp71hUrGp/OaDVofGrpa097xnT7QtC8fC87zVElPVJ1Tm",
	"d7PC1CPDyXzGcC1OTjrmkZ5hPLPyvURswrEkzaty0BmcOpIyG+kIgp/A/xWCUwjugH8MwVMIjtSn/xcE",
	"zyD4Hfwfwu5e//Fd8O6Dt9e7/7T30EcaIl9gy1GhoSuVK28tVN5eqC7WK+/qi1W98s5HSEMtxi0skY6a",
	"WJIFSaPGSAQKyaltDASuJJW/TNlzJSW4DcEBeN0baytjCjaldIReLid/Sg1mlTGXtGGScjUtpc3pLBGr",
	"6XYqrCTsHF3sbr+KpKwR0TZl9pg0hqMlv3kVF7Elp3OMnNEJnTJvjEErrWNZhCjdepOtnQQyQToSPKud",
	"a6NzWLhMvX2/v++NFaj//MH5v9vpvallqA/Ob2Ff4J+B/yT6PJzuccIi4zc1GTOO12q1i87O+dnjsBOA",
	"1+0fHPUefDfmZolB4EXKHoF3CP5t8LfDzlF4eg+CXQiOwT+Z7XRiombc9w+OwTvrvzgF/0fwHr38+Y/w",
	"xV11Du791t/fffntn73O9oh9gzGTYHtEfz0ZMJfGFH6/E97ZGYtpsJqpOxnM06gL3hctQpolLJlV4L4Y",
	"H5w58RyC9wS8r8Hbi+p+Mr0dlxh4hxe7v4D3UNXrm07Y/WfQKieXaogeF3NqOP/7q/7+M/XKKHIlTIz8",
	"7LUwbjCnlrE0GCwbqxs9D1ssS7xqYptI+iXhr11dXX4dDcftxA7S0E3CRQyqliqlilLNHGJjhyIdLZaq",
	"pYoar1huRtkoN9uWFV0xBpmS3Hg3YuBY/VtuIh1dS/5yIhxmi+jOTb8bEpjruu5/AQAA//871kxiOwwA",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
