// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWX4/bRBD/KmXh0RcnPQHCbxWFU6VTFSXpCwhVW3vjLNhes7tGHJUlbBPU6jhASFzb",
	"p6PQXqsmjU5CiD+q1A+z5yj3LdDaTmLHydkR4m29npnfb34znvFdoBPbJQ5yOAPaXcD0AbJhcnyfOH1s",
	"ypNLiYsoxyg1IR7V0yPmyE4Ob1HUBxp4U11GU7NQahqnm3gBXwH8wEVAA5BSeJA8Q3PbYD1oliP5CqDo",
	"cw9TZADt4wXNDOCThTm58ynSufQvMCvlaSCmV9FJfa9LS18BDrRRPY+b0lISZuy2R616Th3GblErL1m1",
	"Tw+a+5jxkjpz4Iy0kmZbqZUU/j8I1YPm9lr1oJnKtZJCnvg6xh8iZHzgcHpQZmxh57MqcOm+L+18Bbje",
	"HQuzgcStdmovjH0l68I6bssPhHm2DVPalU6ZqewJzK1aQL3EcFXN1F1JpclnvOSzyGaT2nvIQRRyZFzj",
	"876g2OWYOEADIvpZhL+J6JWI7ovwpYieimgsH8M/RfRMRL+L8Kd4cjJ7/J0IHojgZPrg6fRRCBSAvoS2",
	"K1MDV5tX395pvrPT2u0139N2W1rz3Y+AAvqE2pADDRiQox2Ok7bICDJOsWPOCe5ndb+M2XNJJbonohci",
	"mNzq7BcYDDh3maaq2U1DJ7YKKce6hdRWnopH8SYS7Xwz1WYSD8cXx4f/hygdxDyLlz8SfTH/qweyjIUc",
	"TvEWe2H5fa5ZCua8lW5DXidQvvVWWztLZCXokvCmdl4uhtpVuhgenb9+LMI/RPhEXgaT+Mej+P5RoWLZ",
	"6QrDfGNRussZUBt8ehrOToMC1Oz5w/N/DvPv1qL15rOjNpYIX2cpRqP1iCsWJdzc6iwBd7rdVMl4GIlg",
	"Mnsxnj78vgCzR0QUJMx+EcFIhPdEeBgPx/GrH0R0LKKXIjzbDHoz2z2Xgm4u3ObA2YZeF7rmMOkjZDQg",
	"J3aNYVLcqRX5jETwRATfiOAkKczZ+n7ZIyIYXRz/KoJHUtBvh/Hk73ktzy7lkPxlbMnh/K+vZ6fPgFJv",
	"Xqz8DZRnRtFgSy4FGUxSzlVOFez0STlw24IO4vgrRK9ca994Ayx28coboIAvEGWpU6vRbDQla+IiB7oY",
	"aGC30Wo05e6FfJCooRqebSczwERrxE3fJhEolHc3DKCB69ktRcwlDksGcv6nInPzfd//NwAA//+gCXx6",
	"/QsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
