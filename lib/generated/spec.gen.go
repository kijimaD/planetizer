// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RX7W/bRBj/V8bBRzdJVwHC36YVqkoditqMDyAUXeOLe2D7zN1lokyWsE3QRleGQHSb",
	"+NANtm7qS6jEO6rWP+aaLP0v0NlO/BYvjsq+Xc7Py+/3vNzz5CZoEdMmFrI4A+pNwFobyITB8Sqx2liX",
	"J5sSG1GOUShCOrQVHjFHZnB4g6I2UMHr1dhaNTJVDe2sBVrAUQDftBFQAaQUbga/oT6rsQbU85YcBVD0",
	"WQdTpAH1ozHMyMHHY3Gy/glqcamfQpbjqSHWmgYn1F2Uko4CsIU5hkbzBmZ43UDllJdDpQ8iHUcBFjRL",
	"6r4vJSVvxpodapRTWmXsOjWSkZ+u04D6CmY8F+SR4wi0EgYtspwPSHESZEYvkIEG1EdJKB+9BtTDAGZI",
	"JalMQvweQtq7FqebecStgEyTjUtqlsYwsPXpNB3pe0XKOQqwO+sGZhsS9HSl+ljYUUA5fFItRsc6pglD",
	"zlOVIlFZYpgbpRw1AsFsKkL1KDRJxjGeMRslE/2i1C0hC1HIkXaFj4qMYptjYgEVCP9H4f0i/BPh3xbe",
	"kfCfCP9Q/vT+Ev5T4f8mvO/7vd3hozvCvSfc3cG9J4MHHlAA+hyatqQKLtcuvzlXe2tufqFRe0ddmFdr",
	"b38IFNAm1IQcqECDHM1xHNRYBJBxii19BHAlqoOXIXsmofi3hL8v3N711ZUUgg3ObaZWq9FNpUXMKqQc",
	"twxUnU9C6VBcBKKeLK7SSPrdw/OdrVcRlFXEOgYv6rhyrSZtIYtTPMP0ipt9wujSR6XUhLyMoWTpjduw",
	"aUK73IN1Ddq5Don4Z7DEPFNeiloiHoGlM33e3T47fSS8P4T3WF66vf532/3b26msR6dLDPPCxK7F70pp",
	"54M9b7jnplwNn90/+3cr+W2it8boPSrtS3inEUX/YLLHjETObxjdq6RjTXhwhvtHwj0dPj8R3g/Cffji",
	"p9/7z+/IaN79dbi38+KbPwfdrdgotjjSEY2tLkYjMm10dW0tzE+/6wu3N9w/HNz/NgV+iQjfDfg+FO6B",
	"8G4Jb6vfPeyf3BX+jvCPhHdcTCWzslyQ0zohBoJWbP5a2A9Q07A0CI16quP/x4krm2Sz2RplJhvkTKsl",
	"pcsMm9xFYmmblrLiZipOS7TYTTJdcki0EdIqkBOzxJBIL15T+BwI97FwvxLubtAsx5N7eIkI9+B852fh",
	"PpDl+HW33/tn1F/HL8UQLKczYjj7+8vh3lO5pZaZA5mVMT8L0gIzYkmFQSd5rk7w96JN8obrBrQQx18g",
	"eulKffk1MN65Ml+AAm4gykKl+UqtUpOoiY0saGOggoVKrbIgdyzIN4JoVLWOaQbvso4mBDf8GligUN4t",
	"a0AFi9EtRcwmFgt6NLk8RmqO4zj/BQAA//+0rf8new4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
