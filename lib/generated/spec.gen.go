// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWW2/cRBT+K2Xg0dlLI0D4raIQRYqqKNnyAELRZHfWGbA9Zma2IlSWsM2iljQUgUhb",
	"8ZAW2rTKZYnEHUXNj5l4s/kXaOzZtddeZ71CfRuPz3fOdy5zzrkNmsRyiI1szoB+G7DmBrJgdHyX2G1s",
	"yJNDiYMoxygWIR3ajI+YIys6vEFRG+jg9WqirapUVWM9qxEKuBrgmw4COoCUws3oGxqzKmtAI6/J1QBF",
	"n3UwRS2gfzSiqQx8PBIn65+gJpf4MWY5P1uINafRibHXpaSrAWxjjqG5dgszvG6icuDFGPSBwrgasKFV",
	"EntDSkq/GVvrULMcaIWxm9RMR346pgGNJcx4LshDw4q0FgdNac4HpDgJMqP/IwMNaAyTUD56DWjEAcw4",
	"lXZlEuP3EWq9Z3O6mWfcjJxZY6OSmuVhmNj+dBpG2l6Scq4GnM66idmGJD0dtDwSdjVQjp+EJexYx7Jg",
	"7PNUkBKVJYa5WcpQIxLMpiKGq9CkPU74jLzRMtEvSt0CshGFHLWu8WGRUexwTGygAxH8KPxfRHAigrvC",
	"PxLBMxEcyk//LxE8F8Fvwv8+7O0OntwT3gPh7fYfPOs/8oEG0OfQcqSr4Grt6ptztbfm6vON2jv6fF2v",
	"vf0h0ECbUAtyoIMW5GiO46jGFEHGKbaNIcElVQeXMXshqQR3RLAvvN7NlaUxBhucO0yvVtVNpUmsKqQc",
	"N01UraepdCguIrGcLq7STMLu4cXO1qsIygpiHZMXvbhyT03qQjaneIbplTz2CaPLGJbSGuRlFKVLL1vq",
	"ypGM0oRwUTkn46t0li6622enT4T/h/CfykuvF363Hd7dHsuYOl1hmBcmZTXpCaWN9/f8wZ43Zmrw4uHZ",
	"v1vpfxOtNYa9pLQt4Z8qF4ODyRYzEjm7qQGfM7yyuhpHMuwGwusN9g/7D78dM7NAROBFzB4L70D4d4S/",
	"FXYPw5P7ItgRwZHwj4uNZhaDnPnB/pHwTgcvT4T/g/Aen//0e/jynszl/V8Hezvn3/zZ724l2tcJMRG0",
	"E/U31Jy81KfiuijmrfaLSapL9qo2Qq0K5MQq0avG5/8Ufw6E91R4XwlvN8r78eRyXCDCO7jY+Vl4j2S+",
	"vu6GvX+GpXJ8KYdoR5qRw9nfXw72nstlqUw7ymwu+ZY0LjAjl7EwGCTvqxttuW2SV7xsQhtx/AWiV64t",
	"L74GRqM/8wdo4BaiLAbVK7VKTbImDrKhg4EO5iv1Sk2Oesg3omhUWx3LilqMgSYEN/4baaBQ3i22gA6u",
	"q1uKmENsFvX79A6jYK7ruv8FAAD//2+3vDICDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
