// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RX3W4bRRR+lTJwubGdRoDYu4pCFClFVuJyAULWxDvZDOwfM+OKUK3E7mLUkoYiEGkL",
	"F2mgTaI4MZH4R1HzMJN1nbdAM7u2d712Mybq3Xj2nPN952/O8W3QcG3PdZDDKNBvA9pYQzaUx7ddZxWb",
	"4uQR10OEYZSIuE3SSI6YIVseXiNoFejg1fLQWjk1VU7sLEst4GuArXsI6AASAtflb2hOa6wGzaIlXwME",
	"fdrEBBlA/3BAMwX4aCDurnyMGkzo55gV/DQQbVxEJ9G9LiR9DWAHMwyt+i1M8YqF1JQXEqX3Ux1fAw60",
	"FXXfE5LCb0rrTWKpKS1RepNY2chfrFOD5iKmrBDkPnBKWkuCllouBmRyEkRGL5GBGjT7SVCPXg2aSQBH",
	"nMq6Mo7xuwgZ7ziMrBcZN6QzdTooKfUcriJkKCoKAsN+srDziYrGopDzNeA1VyxM14SvFytVB8K+BmjT",
	"tmHi9oX0UlFRZZhZSi7VpOBoNhL11M0s+yGffPC0kSxMSuE8chCBDBnXWL/YCPYYdh2gAx79wMNfeHTC",
	"o7s8POLRUx4dip/hXzza49FvPPwu7mz3du7x4AEPtrsPnnYfhUAD6DNoe8JfcLVy9fWZyhszs3O1ylv6",
	"3KxeefMDQdUlNmRABwZkaIZhWWspQcoIdsw+wcU0sS9iti+oRHd4dMCDzs2lxRyDNcY8qpfL6U2p4dpl",
	"SBhuWKg8m6XSJHgSiWq2WpSZxK3D862NlxGUJUSbFpvUeWrjQ9hCDiN4iik2bPoxI8zsl1IdMhVD2dIT",
	"fSULtW5DT+3JuAG9Qpuk/o9wGfqZQ5nUEsNRqJzp89bm2ekOD//g4RNxGXTibzfju5u5rKenKxSziYld",
	"Hj4uyuDd3bC3G+SgevsPz/7dyH4bi1brP0rKWDw8TV2M2uMRRyQKuJlloQDc2z+KOz9K+B1ppM2DPR50",
	"lpaXkwjHrYgHnd7BYffhNzn4eZdHgWT8mAdtHt7h4UbcOoxP7vNoi0dHPDyeTGZk+VCm1Ts44sFp79kJ",
	"D7/nwePnP/0eP7sncn//197u1vOv/+y2NoaoK65rIegMYW8klQ4NAwsgaFVzvXyJmTq6bIryX6833KYj",
	"GzMlhB2GTEQKTZSVVhkjhYvMSP+/KZ7cPpPTmK5000AqjgsxWEuQubbCuMivYgUyeT/bPHjCgy95sC3b",
	"5nh8N8+7PGifb/3Mg0eirL9qxZ1/+p12/EIOcl2dksPZ31/0dvfE3qoyEUaWyOJUyAtMySUXBtMt+urL",
	"PxyrbtFw1YIOYvhzRK5cqy68AgYr2MgXoIFbiNBEabZUKVUEa9dDDvQw0MFcqVKaEysXZGsyGmWjadvy",
	"hTbRmOAmX6UFAsXdggF0cD29JYh6rkNlT2d3yVTN933/vwAAAP//vvEtuY0OAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
